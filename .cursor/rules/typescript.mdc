---
description: TypeScript configuration and best practices for p5.js with strict typing
globs: ["**/*.ts"]
alwaysApply: false
---

# TypeScript Configuration and Best Practices

## Code Style and Formatting

We use [Biome](mdc:https:/biomejs.dev) for linting and formatting. Biome is an all-in-one toolchain for web projects that handles both formatting and linting.

### Running Biome

```bash
# Format and lint files
biome check --write .
```

### Key Biome Rules

We follow Biome's recommended ruleset, which includes:

1. TypeScript-specific rules:
   - `noExplicitAny`: Disallow explicit any
   - `noUnsafeDeclarationMerging`: Prevent unsafe declaration merging
   - `useNamespaceKeyword`: Use namespace instead of module for TypeScript namespaces

2. Code style:
   - Consistent spacing and indentation
   - Semicolons only when needed (custom rule)
   - Consistent quotes and comma style

3. Best practices:
   - `useIsArray`: Prefer Array.isArray() over instanceof Array
   - `noVar`: Use let/const instead of var
   - `useOptionalChain`: Encourage use of optional chaining
   - `useArrowFunction`: Prefer arrow functions when appropriate

## TypeScript Configuration

```typescript
// tsconfig.json key settings
{
    "compilerOptions": {
        "strict": true,
        "target": "ESNext",
        "module": "ESNext",
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "preserve",
        "jsxImportSource": "react",
        "noUnusedLocals": false,
        "noUnusedParameters": false,
        "noPropertyAccessFromIndexSignature": false
    }
}
```

## Project Structure

1. Use explicit file extensions:
```typescript
// Do
import { something } from "./file.ts"
import { component } from "./Component.tsx"

// Don't
import { something } from "./file"
```

2. Organize imports:
```typescript
// External dependencies first
import p5 from "p5"

// Then internal modules
import { getCanvasDimensions } from "../../helpers"
```

## Type Safety

1. Enable strict mode and related flags
2. Use explicit return types for functions
3. Avoid type assertions unless absolutely necessary
4. Use proper type narrowing with type guards

For more details on Biome rules and configuration, refer to:
- [Biome Rules Documentation](mdc:https:/biomejs.dev/linter/rules)
- [Biome Getting Started Guide](mdc:https:/biomejs.dev/guides/getting-started)

# TypeScript Rules

## Type Definitions

1. Always use proper p5.js type definitions:
```typescript
import p5 from "p5"

const sketch = (p: p5) => {
    // Your sketch code here
}
```

2. Use proper types for vectors and colors:
```typescript
// Vectors
const position: p5.Vector = p.createVector(x, y, z)

// Colors
const color: p5.Color = p.color(r, g, b)
```

## Best Practices

1. Always type async functions:
```typescript
p.setup = async (): Promise<void> => {
    // Setup code
}
```

2. Use explicit return types:
```typescript
const generate = (): void => {
    // Generation code
}

const calculateDistance = (x1: number, y1: number, x2: number, y2: number): number => {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))
}
```

3. Type array declarations:
```typescript
const points: p5.Vector[] = []
const colors: string[] = []
```

## Strict TypeScript Settings

The following strict settings are enabled:
- `strict: true`
- `noImplicitAny: true`
- `strictNullChecks: true`
- `strictFunctionTypes: true`
- `strictPropertyInitialization: true`
- `noImplicitThis: true`
- `alwaysStrict: true`

## Error Prevention

1. Always check for null/undefined:
```typescript
if (colors && colors.length > 0) {
    const color = colors[p.floor(p.random(colors.length))]
}
```

2. Use type guards when necessary:
```typescript
if (typeof value === "number") {
    return value * 2
}
```
